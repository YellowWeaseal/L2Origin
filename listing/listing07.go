package listing

import (
	"fmt"
	"math/rand"
	"time"
)

//создается канал c, и внутри анонимной горутины числа из аргументов поочередно отправляются в этот канал c,
//со случайными задержками от 0 до 999 миллисекунд, после чего канал c закрывается.

func asChan(vs ...int) <-chan int {
	c := make(chan int)

	go func() {
		for _, v := range vs {
			c <- v
			time.Sleep(time.Duration(rand.Intn(1000)) * time.Millisecond)
		}

		close(c)
	}()
	return c
}

//Функция merge принимает два канала a и b и возвращает канал, который объединяет данные из этих двух каналов в один. Внутри анонимной горутины функции merge,
//используется select для чтения данных из канала a или b и отправки их в канал c, который затем возвращается из функции.

func merge(a, b <-chan int) <-chan int {
	c := make(chan int)
	go func() {
		for {
			select {
			case v := <-a:
				c <- v
			case v := <-b:
				c <- v
			}
		}
	}()
	return c
}

// в главной функции запускается цикл for для чтения данных из канала c. Этот цикл будет продолжаться до тех пор, пока в канале c есть данные
func main() {

	a := asChan(1, 3, 5, 7)
	b := asChan(2, 4, 6, 8)
	c := merge(a, b)
	for v := range c {
		fmt.Println(v)
	}
}

//Поскольку горутины работают параллельно и имеется случайная задержка при отправке данных в каналы, порядок,
//в котором числа будут считаны из канала c, будет разным при каждом выполнении программы.

//Вывод функции: 1 3 5 7 2 4 6 8 0 0 0 ...0
