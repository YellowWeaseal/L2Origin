package listing

import (
	"fmt"
)

func main() {
	//Создается слайс s
	var s = []string{"1", "2", "3"}
	modifySlice(s)
	fmt.Println(s)
}

/*
В голанг  переменные в функцию передаются по значению из чего следует,что
i[0] = "3" Этим действием мы заменили 0 элемент нашего изначального слайса, но
после i = append(i, "4") , функция append вернула нам новый слайс к которому наш изначальный слайс не имеет никакого отношения
поэтому последующие изменения не коснутся слайса s
*/
func modifySlice(i []string) {
	i[0] = "3"
	i = append(i, "4")
	i[1] = "5"
	i = append(i, "6")
}

//Вывод программы: [3 2 3]

/*
 Внутреннее устройство слайсов в Go :

Заголовок слайса (Slice Header): Слайс в Go представляет собой структуру данных, которая включает в себя несколько полей. Главное поле - это заголовок слайса, который содержит следующие элементы:

	Указатель на массив (pointer to an array): Этот указатель указывает на начало подходящего массива. Этот массив содержит фактические данные, на которые ссылается слайс.
	Длина (length): Это количество элементов в слайсе.
	Емкость (capacity): Это максимальное количество элементов, которое слайс может содержать без изменения его базового массива.

Двойная ссылка: Когда вы передаете слайс в качестве аргумента функции, вы передаете не сам слайс, а его копию, включая заголовок слайса.
Это значит, что как указатель на массив, так и длина и емкость также копируются. Это называется "двойной ссылкой", так как исходный и копируемый слайсы всегда ссылаются на один и тот же массив данных.

Изменение слайсов в функциях: Если вы передаете слайс в функцию и внутри этой функции изменяете его содержимое (например, добавляете элементы с помощью append),
то эти изменения будут видны в вызывающей функции после завершения вызываемой функции. Это происходит из-за двойной ссылки, которая обеспечивает доступ к одному и тому же массиву данных как в вызывающей, так и в вызываемой функции.
*/
