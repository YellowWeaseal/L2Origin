package listing

import (
	"fmt"
	"os"
)

func Foo() error {
	var err *os.PathError = nil
	return err
}

func main() {
	err := Foo()
	fmt.Println(err)
	fmt.Println(err == nil)
}

//Вывод функции: <nil> false
/*
1)err := Foo() вызывает функцию Foo и присваивает возвращенное значение переменной err. В данном случае err будет иметь тип *os.PathError.

2)fmt.Println(err) выводит значение переменной err. Поскольку Foo устанавливает err в nil, то в результате выводится <nil>.

3)fmt.Println(err == nil) сравнивает переменную err с nil. Поскольку err содержит указатель на *os.PathError, и этот указатель не является nil, то выражение err == nil оценивается как false.
*/

/*В Go интерфейсы представляют собой абстрактные типы данных, определяющие набор методов, который должны быть реализован другими типами
В себе они содержат два значения

Значение интерфейса (value):
Это указатель на значение конкретного типа данных, который удовлетворяет интерфейсу. Значение интерфейса хранит информацию о типе и значении конкретного объекта.

Тип интерфейса (type):
Это указатель на таблицу методов (method table), также называемую интерфейсной таблицей (interface table). Эта таблица содержит указатели на конкретные методы, которые можно вызвать для объекта, реализующего интерфейс.
*/

/*
Обычные интерфейсы (interface):
Эти интерфейсы определяют набор методов, которые должны быть реализованы типами, чтобы они удовлетворяли интерфейсу.

Пустые интерфейсы (interface{}):
Пустой интерфейс, не определяет никаких методов. Это означает, что любой тип данных в Go автоматически удовлетворяет пустому интерфейсу, потому что у пустого интерфейса нет никаких требований к методам.
Пустые интерфейсы используются, когда вам нужно работать с данными различных типов без определения заранее, какой конкретный тип данных будет использоваться.
*/
