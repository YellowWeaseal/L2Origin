package pattern

import "fmt"

// Интерфейс Команды
type Command interface {
	Execute()
}

// Конкретная Команда
type ConcreteCommand struct {
	receiver Receiver
}

func (c *ConcreteCommand) Execute() {
	c.receiver.Action()
}

// Получатель (Receiver)
type Receiver struct{}

func (r *Receiver) Action() {
	fmt.Println("Выполнение команды")
}

// Инициатор (Invoker)
type Invoker struct {
	command Command
}

func (i *Invoker) SetCommand(command Command) {
	i.command = command
}

func (i *Invoker) ExecuteCommand() {
	i.command.Execute()
}

func main() {
	// Создаем объекты
	receiver := &Receiver{}
	command := &ConcreteCommand{receiver: *receiver}
	invoker := &Invoker{}

	// Назначаем команду и выполняем
	invoker.SetCommand(command)
	invoker.ExecuteCommand()
}

/*
Паттерн Команда (Command) используется для инкапсуляции запроса как объекта, позволяя параметризовать клиентские запросы,
обращаться к ним в виде объектов, а также поддерживать отмену операций
*/

/*
Паттерн Команда (Command) имеет широкую применимость в разработке программного обеспечения и может быть полезен в различных сценариях.
Вот объяснение применимости паттерна Команда:

Управление действиями и операциями:
Паттерн Команда подходит, когда вы хотите инкапсулировать определенное действие или операцию как объект. Это позволяет передавать операции в качестве параметров, хранить их, и выполнять в разное время.

История и отмена операций:
Команды можно использовать для создания механизма отмены и повтора операций. Вы можете сохранять список выполненных команд и воспроизводить их в обратном порядке для отмены действий.

Управление очередью и планированием операций:
Команды могут быть добавлены в очередь и выполнены в определенном порядке. Это полезно для реализации планирования задач и управления выполнением операций.

Расширяемость и добавление новых операций:
Паттерн Команда позволяет легко добавлять новые операции, не изменяя существующего кода. Просто создайте новый класс команды и добавьте его в систему.

Уменьшение связанности:
Команды позволяют разделить отправителя команды (Invoker) и получателя (Receiver) операции, что уменьшает связанность и делает код более гибким.

Управление параллельными операциями:
В многозадачных или параллельных системах, где несколько потоков или процессов могут выполнять операции, паттерн Команда может упростить управление и синхронизацию операций.

Интерфейсы и обработчики событий:
Команды могут использоваться для обработки событий и действий пользователей в графических интерфейсах. Каждое действие пользователя может быть инкапсулировано как команда.
*/

/*
Плюсы паттерна Команда:

Инкапсуляция операций: Команда инкапсулирует запросы и операции как объекты, что делает их легкими в управлении и передаче между объектами.

Отмена и повтор операций: Паттерн Команда позволяет легко реализовать механизмы отмены и повтора операций, так как выполненные команды могут быть сохранены и воспроизведены в обратном порядке.

Управление очередью и планированием: Команды могут быть добавлены в очередь и выполняться в определенном порядке, что полезно для управления задачами и операциями.

Расширяемость: Добавление новых команд не требует изменения существующего кода. Это делает систему более гибкой и расширяемой.

Уменьшение связанности: Паттерн Команда разделяет отправителя команды (Invoker) и получателя (Receiver) операции, уменьшая связанность и делая систему более модульной.

Обработка событий и пользовательских действий: Команды могут быть использованы для обработки событий и действий пользователей в графических интерфейсах и других приложениях.

Минусы паттерна Команда:

Увеличение числа классов: Внедрение паттерна Команда может привести к увеличению числа классов, что может быть избыточным для простых операций и приложений.

Дополнительная сложность: В некоторых случаях, особенно для простых задач, использование Команд может добавить дополнительную сложность и абстракцию в коде.

Возможное увеличение объема памяти: Если хранить историю выполненных команд для отмены, это может привести к увеличению потребления памяти.

Сложность отладки: Введение команд может сделать код более сложным для отладки и понимания, особенно в больших системах.

Не всегда подходит: Паттерн Команда не всегда подходит для каждой задачи. Его использование требует внимательного анализа требований и проектирования.
*/

/*
Примеры реадьного использования:

Графические приложения:
В графических редакторах, таких как Adobe Photoshop, команды могут представлять различные действия, такие как "Открыть файл", "Вырезать", "Скопировать", "Вставить" и так далее. Каждая команда инкапсулирует одно действие, и пользователь может отменить или повторить их в определенной последовательности.

Управление устройствами:
В системах управления умными домами, телевизорами, пультами дистанционного управления и другими устройствами команды могут представлять действия, такие как "Включить", "Выключить", "Повысить громкость", "Переключить канал" и т.д. Команды могут быть запланированы или выполнены в ответ на команды пользователя.

Системы управления транспортом:
В системах управления транспортными средствами, такими как поезда и автобусы, команды могут представлять операции, такие как "Запустить двигатель", "Остановиться", "Повернуть налево", "Повернуть направо" и другие. Эти команды могут быть отправлены системой управления для контроля движения.

Текстовые редакторы:
В текстовых редакторах команды могут представлять действия, такие как "Открыть файл", "Сохранить файл", "Вырезать", "Копировать", "Вставить", "Отменить" и "Повторить". Пользователь может выполнять эти действия с помощью горячих клавиш или меню.

Игровые движки:
В игровых движках команды могут использоваться для управления игровыми объектами и событиями. Например, команды могут представлять действия персонажей, как перемещение, атаку и использование предметов, а также управление событиями в игре.
*/
