package pattern

import (
	"fmt"
)

// Продукт, который мы хотим построить
type Product struct {
	Part1 string
	Part2 string
	Part3 string
}

// Интерфейс Строителя
type Builder interface {
	BuildPart1()
	BuildPart2()
	BuildPart3()
	GetProduct() *Product
}

// Конкретный Строитель
type ConcreteBuilder struct {
	product *Product
}

func NewConcreteBuilder() *ConcreteBuilder {
	return &ConcreteBuilder{product: &Product{}}
}

func (b *ConcreteBuilder) BuildPart1() {
	b.product.Part1 = "Part1"
}

func (b *ConcreteBuilder) BuildPart2() {
	b.product.Part2 = "Part2"
}

func (b *ConcreteBuilder) BuildPart3() {
	b.product.Part3 = "Part3"
}

func (b *ConcreteBuilder) GetProduct() *Product {
	return b.product
}

// Директор, который управляет процессом построения
type Director struct {
	builder Builder
}

func NewDirector(builder Builder) *Director {
	return &Director{builder: builder}
}

func (d *Director) Construct() {
	d.builder.BuildPart1()
	d.builder.BuildPart2()
	d.builder.BuildPart3()
}

func main() {
	builder := NewConcreteBuilder()
	director := NewDirector(builder)
	director.Construct()

	product := builder.GetProduct()

	fmt.Printf("Product: Part1 - %s, Part2 - %s, Part3 - %s\n", product.Part1, product.Part2, product.Part3)
}

/*Паттерн Строитель (Builder) применяется в ситуациях, когда необходимо создать сложные объекты с множеством параметров,
при этом хочется избежать длинных конструкторов с большим числом аргументов и сделать процесс создания более гибким и читаемым
*/

/*
Плюсы паттерна Строитель:

1.Разделение сложности: Позволяет разделить процесс создания сложных объектов на более мелкие шаги, что делает код более читаемым и поддерживаемым.

2.Гибкость: Паттерн Строитель позволяет создавать различные варианты одного и того же объекта, меняя только конкретный строитель. Это увеличивает гибкость кода.

3.Изоляция логики: Изолирует сложную логику создания объекта от клиентского кода, что уменьшает связанность и упрощает изменение объекта в будущем.

4.Повышение безопасности: Поскольку объект строится пошагово, паттерн Строитель может обеспечить согласованное состояние объекта, что помогает избежать ошибок.

5.Улучшенная читаемость: Каждый метод строителя имеет понятное имя, что делает код более читаемым и понятным.

Минусы паттерна Строитель:

1.Увеличение сложности кода: Внедрение паттерна Строитель может увеличить количество классов и уровень абстракции, что может быть избыточным для простых объектов.

2.Дополнительный код: Необходимо создавать дополнительные классы для строителя и продукта, что может увеличить объем кода.

3.Недостаточная гарантия завершения построения: В некоторых случаях, если разработчик не вызывает все необходимые методы строителя, объект может оказаться в некорректном состоянии.

4.Переопределение методов: В некоторых случаях придется переопределять все методы строителя, даже если нужно изменить только один параметр объекта.

5.Ограниченная применимость: Паттерн Строитель наиболее полезен для создания сложных объектов. Для простых объектов он может быть избыточным.
*/

/*

Паттерн Строитель активно используется на практике в различных областях разработки программного обеспечения.
Вот несколько реальных примеров его применения:

Построение SQL-запросов:
При создании сложных SQL-запросов, особенно в ситуациях, когда необходимо учитывать множество условий и фильтров, паттерн Строитель может быть полезным. Каждый метод строителя может добавлять условия, сортировку, объединение таблиц и другие операции, что делает код более читаемым и удобным для поддержки.

Построение графических интерфейсов:
При создании графических пользовательских интерфейсов (GUI) часто требуется создавать сложные макеты с множеством элементов управления. Паттерн Строитель может быть использован для пошагового создания и конфигурации различных элементов интерфейса, таких как кнопки, текстовые поля, таблицы и др.

Генерация документов:
Паттерн Строитель применяется при создании документов различных форматов, таких как HTML, XML, PDF и других. Например, при создании HTML-страницы можно использовать строителя для построения структуры страницы, включая заголовки, текст, изображения и ссылки.

Создание объектов для тестирования:
В тестировании часто требуется создавать объекты с определенными характеристиками для проверки различных сценариев. С помощью паттерна Строитель можно удобно создавать тестовые объекты с заданными параметрами.

Конфигурация и настройка приложений:
В некоторых приложениях необходимо настраивать множество параметров и опций. Паттерн Строитель может быть использован для создания объектов, представляющих конфигурацию приложения, позволяя гибко устанавливать параметры.

Интеграция с внешними API:
При взаимодействии с внешними API, требуется формировать запросы и ответы в соответствии с определенной структурой. Строитель может быть использован для создания запросов с определенными параметрами и заголовками.
*/
