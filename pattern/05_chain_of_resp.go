package pattern

import (
	"fmt"
)

// Интерфейс Обработчика
type Handler interface {
	HandleRequest(int)
	SetNext(Handler)
}

// Конкретный Обработчик
type ConcreteHandler struct {
	value int
	next  Handler
}

func (ch *ConcreteHandler) SetNext(handler Handler) {
	ch.next = handler
}

func (ch *ConcreteHandler) HandleRequest(request int) {
	if request == ch.value {
		fmt.Printf("Обработчик %d обработал запрос %d\n", ch.value, request)
	} else if ch.next != nil {
		fmt.Printf("Обработчик %d передал запрос %d следующему обработчику\n", ch.value, request)
		ch.next.HandleRequest(request)
	} else {
		fmt.Printf("Запрос %d не был обработан ни одним обработчиком\n", request)
	}
}

func main() {
	handler1 := &ConcreteHandler{value: 1}
	handler2 := &ConcreteHandler{value: 2}
	handler3 := &ConcreteHandler{value: 3}

	handler1.SetNext(handler2)
	handler2.SetNext(handler3)

	requests := []int{1, 2, 3, 4}

	for _, req := range requests {
		handler1.HandleRequest(req)
		fmt.Println()
	}
}

/*
Паттерн "Цепочка обязанностей" (Chain of Responsibility) имеет применимость в сценариях,
где несколько объектов обрабатывают запросы и выстраиваются в цепочку.

Обработка событий и запросов в GUI: В графических пользовательских интерфейсах (GUI) события, такие как нажатия клавиш или клики мыши, могут быть обработаны цепочкой обработчиков. Например, первый обработчик может проверить, является ли событие щелчком на кнопке, а следующий обработчик может проверить, является ли это контекстным меню, и так далее.

Логирование и обработка ошибок: В системах обработки ошибок, где несколько компонентов или модулей могут обнаруживать и логировать ошибки, цепочка обязанностей может использоваться для передачи ошибок и записи их в журналы.

Обработка запросов веб-серверов: В веб-серверах обработка запросов может включать несколько этапов, таких как проверка аутентификации, авторизация, сжатие данных и кэширование. Каждый этап может быть реализован как обработчик в цепочке.

Фильтры и обработка данных: Паттерн "Цепочка обязанностей" может использоваться для создания фильтров и обработки данных, таких как фильтры для изображений или текстовых данных. Каждый фильтр может выполнять определенное преобразование данных.

Разбор запросов и команд: В интерпретаторах или обработчиках команд, где несколько команд или запросов должны быть выполнены в определенном порядке, цепочка обязанностей может помочь управлять выполнением команд в нужной последовательности.

Динамический выбор обработчика: Паттерн позволяет динамически добавлять или изменять обработчики в цепочке, что делает систему более гибкой и расширяемой.
*/

/*
Плюсы паттерна "Цепочка обязанностей":

Разделение обязанностей: Паттерн позволяет разделить обработку запросов на отдельные компоненты, что способствует увеличению модульности и уменьшению сложности кода.

Гибкость и расширяемость: Вы можете легко добавлять или изменять обработчики запросов в цепочке без изменения кода клиента. Это делает систему более гибкой и расширяемой.

Уменьшение зависимостей: Отправитель запроса и получатель запроса не зависят друг от друга напрямую. Каждый обработчик имеет только ссылку на следующий обработчик, что снижает связанность.

Поддержка отмены: Возможность прекращения обработки запроса в середине цепочки путем простого отсутствия вызова следующего обработчика.

Уровни безопасности: Можно настроить различные уровни обработки запросов, например, проверка наличия аутентификации, авторизация и обработка данных, что способствует управлению безопасностью.

Минусы паттерна "Цепочка обязанностей":

Не гарантируется обработка запроса: В цепочке обязанностей нет гарантии того, что запрос будет обработан. Если ни один обработчик не обработает запрос, он может остаться непроинициализированным.

Потенциальная нежелательная задержка: Поскольку запрос проходит через несколько обработчиков, может возникнуть нежелательная задержка в обработке запроса.

Сложность отладки: Понимание, какой обработчик обработал запрос, может быть сложным при отладке, особенно в длинных цепях обязанностей.

Неявная зависимость от порядка: Порядок обработки запросов может быть неявно определен в цепочке, и это может привести к неожиданным результатам, если порядок обработки изменяется.

Переполнение цепи: Слишком длинная цепь обязанностей может привести к сложностям в управлении и понимании системы.
*/

/*
Реальные примеры использования:
Обработка HTTP-запросов в веб-фреймворках: В веб-фреймворках, таких как Express.js для Node.js или ASP.NET в языке C#, паттерн "Цепочка обязанностей" может использоваться для обработки HTTP-запросов.
Различные обработчики могут обрабатывать запросы на основе пути URL, HTTP-метода, заголовков и других параметров. Например, один обработчик может проверять аутентификацию, а другой обрабатывать маршруты API.

Обработка событий в графических библиотеках: Графические библиотеки, такие как Swing для Java или Windows Forms для C#, используют паттерн "Цепочка обязанностей" для обработки событий, таких как клики мыши и нажатия клавиш. Обработчики событий могут быть прикреплены к элементам управления,
и события передаются вдоль цепочки обработчиков, начиная с элемента, который их инициировал.

Проверка безопасности и авторизация: В системах информационной безопасности и авторизации паттерн "Цепочка обязанностей" может использоваться для проверки источника запросов, аутентификации пользователей и авторизации доступа к ресурсам. Каждый обработчик может выполнять различные виды проверок и действий безопасности.

Логирование и аудит действий: В приложениях, требующих логирования и аудита действий пользователей, паттерн "Цепочка обязанностей" может быть использован для записи событий в журналы. Различные обработчики могут регистрировать разные виды событий, и информация может быть передана по цепочке.

Обработка команд в играх: В игровых движках паттерн "Цепочка обязанностей" может использоваться для обработки команд игрока. Например, один обработчик может управлять перемещением персонажа, а другой — атакой и взаимодействием с предметами.

Обработка заказов и транзакций в электронной коммерции: В электронной коммерции паттерн "Цепочка обязанностей" может быть применен для обработки заказов и транзакций. Каждый обработчик может выполнять определенные этапы, такие как проверка наличия товаров, расчет суммы и обработка платежа.

Фильтры в обработке данных: При обработке данных, таких как изображения или текст, паттерн "Цепочка обязанностей" может использоваться для применения фильтров и преобразований. Каждый обработчик может выполнять определенное преобразование данных.
*/
